/ws-clean-architecture
├── cmd/
│   └── main.go
├── internal/
│   ├── delivery/
│   │   ├── http/
│   │   │   ├── handler.go
│   │   │   └── route.go
│   │   └── websocket/
│   │       ├── handler.go
│   │       └── route.go
│   ├── domain/
│   │   ├── model.go
│   │   ├── http.go
│   │   ├── websocket.go
│   │   └── repository.go      <-- ✅ Interface definitions
│   ├── repository/            <-- ✅ Implementation
│   │   └── memory/
│   │       └── chat_repository.go
│   ├── usecase/
│   │   ├── http/
│   │   │   └── http_usecase.go
│   │   └── websocket/
│   │       └── websocket_usecase.go
├── go.mod
└── go.sum

// main.go
package main

import (
	"fiber_websocket_clean_arch/infrastructure"
)

func main() {
	infrastructure.StartServer()
}

// domain/model/message.go
package model

type Message struct {
	Sender  string `json:"sender"`
	Content string `json:"content"`
}

// usecase/websocket_usecase.go
package usecase

import (
	"fiber_websocket_clean_arch/domain/model"
)

type WebSocketUseCase interface {
	HandleMessage(msg model.Message) model.Message
}

type websocketUseCase struct{}

func NewWebSocketUseCase() WebSocketUseCase {
	return &websocketUseCase{}
}

func (u *websocketUseCase) HandleMessage(msg model.Message) model.Message {
	// Simple echo logic
	msg.Content = "Echo: " + msg.Content
	return msg
}

// interface/handler/websocket_handler.go
package handler

import (
	"encoding/json"
	"log"

	"fiber_websocket_clean_arch/domain/model"
	"fiber_websocket_clean_arch/usecase"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/websocket/v2"
)

type WebSocketHandler struct {
	usecase usecase.WebSocketUseCase
}

func NewWebSocketHandler(usecase usecase.WebSocketUseCase) *WebSocketHandler {
	return &WebSocketHandler{usecase: usecase}
}

func (h *WebSocketHandler) Handle(c *websocket.Conn) {
	var msg model.Message
	for {
		_, data, err := c.ReadMessage()
		if err != nil {
			log.Println("read error:", err)
			break
		}
		err = json.Unmarshal(data, &msg)
		if err != nil {
			log.Println("unmarshal error:", err)
			continue
		}
		response := h.usecase.HandleMessage(msg)
		respData, _ := json.Marshal(response)
		c.WriteMessage(websocket.TextMessage, respData)
	}
}

// infrastructure/websocket_server.go
package infrastructure

import (
	"fiber_websocket_clean_arch/interface/handler"
	"fiber_websocket_clean_arch/usecase"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/websocket/v2"
)

func StartServer() {
	app := fiber.New()
	wsUsecase := usecase.NewWebSocketUseCase()
	wsHandler := handler.NewWebSocketHandler(wsUsecase)

	app.Get("/ws", websocket.New(wsHandler.Handle))

	app.Listen(":3000")
}
